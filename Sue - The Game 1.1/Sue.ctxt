#BlueJ class context
comment0.params=
comment0.target=Sue()
comment0.text=\r\n\ Constructor.\r\n
comment1.params=
comment1.target=void\ act()
comment1.text=\r\n\ Act\ -\ do\ whatever\ the\ Sue\ wants\ to\ do.\ This\ method\ is\ called\ whenever\r\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n
comment10.params=
comment10.target=void\ catchDog()
comment10.text=\r\n\ catchDog\ \ \ -\ The\ following\ pot\ of\ spaghetti\ code\ is\ my\ humble\ attempt\ at\ creating\ a\ workaround\ for\ allowing\ the\ dog\ catcher\ to\r\n\ \ \ \ \ \ catch\ the\ dog\ only\ if\ they\ are\ really\ touching/overlapping.\ Since\ the\ imported\ images\ are\ rectangles,\ they\ have\ transparent\r\n\ \ \ \ \ \ borders\ that\ would\ trigger\ the\ isTouching()\ method\ leading\ to\ the\ dog\ being\ caught\ when\ the\ images'\ borders\ touched,\ which\ often\r\n\ \ \ \ \ \ left\ a\ gap\ where\ the\ actors\ didn't\ appear\ to\ be\ actually\ touching\ in\ runtime\ (their\ outtermost,\ unseen,\ rectangular\ borders\ were\ touching).\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ My\ solution\ was\ to\ use\ the\ getOneObjectAtOffset\ method\ to\ try\ and\ get\ the\ actors\ to\ overlap\ each\ other\ before\ trigger\ the\ dog\ being\r\n\ \ \ \ \ \ caught.\ The\ getOneObjectAtOffset\ method\ uses\ a\ set\ of\ coordinates\ to\ determine\ where\ the\ objects\ will\ actually\ be\ considered\ touching\ relative\r\n\ \ \ \ \ \ to\ where\ the\ actor\ currently\ is.\ By\ offsetting\ the\ coordinates\ a\ little\ bit,\ I\ could\ alter\ the\ positioning\ to\ only\ be\ triggered\ depending\r\n\ \ \ \ \ \ on\ which\ direction\ the\ dog\ catcher\ was\ moving\ relative\ to\ the\ dog.\ \r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ The\ outer\ IF\ tests\ to\ see\ if\ the\ Dog\ Catcher\ is\ above,\ below,\ or\ level\ with\ the\ Dog.\r\n\ \ \ \ \ \ After\ determining\ the\ Y\ position\ as\ smaller(DogCatcher\=Above),\ larger(Below),\ or\ equal(Level),\ the\ nested\ IF\ would\ then\ check\ the\r\n\ \ \ \ \ \ relative\ X\ values\ the\ same\ way\ to\ determine\ if\ the\ dog\ is\ left,\ right,\ or\ level\ (on\ X\ axis).\ The\ final\ IF\ then\ uses\ the\ getOneObjectAtOffset\r\n\ \ \ \ \ \ to\ return\ an\ actor\ if\ it\ is\ interecting\ at\ the\ offset.\ The\ path\ to\ the\ final\ IF\ test\ will\ determine\ which\ direction\ the\ Dog\ Catcher\ is\ relative\r\n\ \ \ \ \ \ to\ the\ Dog,\ so\ the\ offset\ values\ are\ changed\ to\ offset\ depending\ on\ which\ direction\ the\ dog\ catcher\ is\ coming\ from.\ Example\:\ If\ Dog\ Catcher\ is\ directly\ left,\r\n\ \ \ \ \ \ the\ offset\ X\ value\ would\ need\ to\ be\ positive\ to\ add\ a\ few\ pixels\ so\ that\ he\ is\ only\ considered\ touching\ the\ Dog\ when\ he\ intersects\ with\ the\ new\ coordinates\ \r\n\ \ \ \ \ \ which\ are\ slightly\ to\ the\ right\ of\ the\ outermost\ left\ border\ of\ the\ dog\ (allowing\ them\ to\ overlap\ a\ little).\ The\ hardcoded\ numbers\ change\ the\ offset\ coordinates\r\n\ \ \ \ \ \ in\ pixels\ and\ have\ been\ trial\ and\ errored\ to\ find\ the\ best\ relative\ positioning\ to\ actually\ trigger\ the\ dog\ getting\ caught.\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ This\ is\ a\ mouthful\ and\ writing\ the\ description\ confused\ even\ me.\ I'm\ almost\ positive\ there\ is\ a\ more\ elegant\ solution,\ but\ being\ brand\ new\ to\r\n\ \ \ \ \ \ coding,\ this\ is\ the\ most\ workable\ solution\ I\ could\ come\ up\ with...please\ feel\ free\ to\ help\ clean\ this\ up\ with\ some\ expertise\!\r\n
comment2.params=
comment2.target=void\ checkKeyPress()
comment2.text=\r\n\ checkKeyPress\ -\ According\ to\ the\ key\ pressed,\ move\ the\ dog\ in\ the\ correct\ direction\ or\ trigger\ one\ of\ the\ actions.\r\n\ Keys\ used\ (in\ order\ they\ appear)\:\ (1)"LEFT"\ \ (2)"RIGHT"\ \ (3)"UP"\ \ (4)"DOWN"\ (5)"P"\r\n
comment3.params=
comment3.target=void\ walkAnimation()
comment3.text=\r\n\ walkAnimation\ \ -\ Creates\ the\ innovative\ animation\ of\ the\ dog.\ Increments\ the\ animationCounter\ to\ have\ Sue\ rotate\ a\ little\ to\ the\r\n\ \ \ \ \ \ left\ and\ right\ depending\ on\ the\ value\ of\ the\ counter.\ There\ are\ 3\ resting\ spots\:\ 1)\ level,\ 2)\ left\ turn,\ 3)\ right\ turn.\r\n\ \ \ \ \ \ The\ dog\ simply\ shifts\ its\ angle\ depending\ on\ the\ value\ of\ the\ counter\ which\ will\ be\ incremented\ when\ a\ key\ is\ pressed.\r\n
comment4.params=
comment4.target=void\ checkTouching()
comment4.text=\r\n\ checkTouching\ -\ Check\ if\ Sue\ is\ touching\ the\ different\ actors\ in\ the\ world.\r\n
comment5.params=
comment5.target=void\ peeOnHydrant()
comment5.text=\r\n\ \ peeOnHydrant\ \ -\ Method\ for\ peeing\ on\ the\ hydrant.\ Called\ from\ the\ checkTouching\ method.\r\n
comment6.params=
comment6.target=void\ setAlreadyPeedFalse()
comment6.text=\r\n\ setAlreadyPeedFalse\ \ -\ This\ method\ is\ called\ by\ the\ Dog\ Catcher's\ "cleanPee"\ method.\ The\ method\ is\ used\ when\ the\ dog\ catcher\ is\ finished\r\n\ cleaning\ the\ pee\ and\ allows\ the\ alreadyPeed\ boolean\ here\ to\ be\ changed\ from\ the\ Dog\ Catcher\ class.\r\n
comment7.params=
comment7.target=boolean\ returnAlreadyPeed()
comment7.text=\r\n\ returnAlreadyPeed()\ \ -\ Public\ method\ to\ return\ if\ the\ dog\ has\ alreadyPeed\r\n
comment8.params=
comment8.target=void\ cooldown()
comment8.text=\r\n\ \ actionCooldown\ \ -\ Prevents\ action\ spamming.\ Action\ cooldown\ begins\ at\ its\ maximum\ and\ remains\ there\ until\ an\ action\r\n\ \ \ \ \ \ is\ used.\ When\ an\ action\ is\ used,\ the\ cooldown\ is\ set\ to\ 0\ and\ will\ then\ begin\ to\ increase.\ Whenever\ an\ action\ is\ attempted,\r\n\ \ \ \ \ \ the\ cooldown\ will\ be\ tested\ and\ action\ will\ only\ be\ completed\ if\ cooldown\ is\ at\ its\ maximum\ value.\r\n
comment9.params=
comment9.target=void\ checkPocket()
comment9.text=\r\n\ checkPocket\ \ -\ Checks\ the\ amount\ in\ the\ pocket\ and\ flashes\ brown\ if\ full.\r\n
numComments=11
